@page "/{Id:guid}"
@page "/"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using ChatGPTClone.Domain.Enums
@using ChatGPTClone.WasmClient.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject ILocalStorageService LocalStorage
@inject ThemeService ThemeService

<PageTitle>Todo App</PageTitle>

<AuthorizeView>
    <Authorized>

        <div class="flex-1 flex flex-col" data-theme="@currentTheme">
            <header class="border-b border-base-100 flex justify-between items-center">
                <!-- Model Dropdown -->
                <div class="dropdown">
                    <button class="btn btn-ghost" @onclick="ToggleDropdown">
                        @currentModel.ToString()
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24"
                             stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                        </svg>
                    </button>
                    @if (isDropdownOpen)
                    {
                        <ul tabindex="0"
                            class="absolute mt-2 dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                            @foreach (var model in Enum.GetValues<GptModelType>())
                            {
                                <li class="@(currentModel == model ? "bg-gray-600" : "")">
                                    <button @onclick="() => SelectModel(model)">
                                        @model.ToString() @(currentModel == model ? "👈"
                                : "")
                                </button>
                            </li>
                        }
                        </ul>
                    }
                </div>
                <div class="flex items-center space-x-4">
                    <!-- Language Dropdown -->
                    <div class="dropdown dropdown-end mr-4">
                        <label tabindex="0" class="btn btn-ghost btn-circle">
                            <svg @onclick="ToggleDropdown" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5"
                                 fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M3 5h12M9 3v12M21 9v6m-2-2a4 4 0 00-8 0v4H3V9a2 2 0 012-2h6a2 2 0 012 2v4h-1m2 0h1" />
                            </svg>
                        </label>
                        @if (isDropdownOpen)
                        {
                            <ul tabindex="0" class="dropdown-content menu p-2 shadow bg-base-100 rounded-box w-40">
                                <li><a @* @onclick="ChangeLanguage('en')" *@>English</a></li>
                                <li><a @* @onclick="ChangeLanguage('tr')" *@>Türkçe</a></li>
                                <li><a @* @onclick="ChangeLanguage('fr')" *@>Français</a></li>
                            </ul>
                        }
                    </div>
                    <!-- Profile Dropdown -->
                    <div class="dropdown dropdown-end">
                        <button @onclick="ToggleDropdown" class="btn btn-ghost btn-circle avatar">
                            <div class="w-10 rounded-full bg-primary/10">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 m-2" fill="none"
                                     viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                </svg>
                            </div>
                        </button>
                        @if (isDropdownOpen)
                        {
                            <ul tabindex="0"
                                class="absolute right-0 mt-2 dropdown-content z-[1] menu p-2 shadow bg-base-100 rounded-box w-52">
                                <li>
                                    <label class="flex cursor-pointer gap-2">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">

                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
                                        </svg>
                                        <input type="checkbox" class="toggle" checked="@(currentTheme == "light")"
                                               @onchange="ToggleTheme" />
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
                                        </svg>
                                    </label>
                                </li>
                                <li>
                                    <a>
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                                        </svg>
                                        Çıkış Yap
                                    </a>
                                </li>
                            </ul>
                        }
                    </div>
                </div>

            </header>
            <!-- Main Content Area -->
            <div class="flex-1 flex items-center justify-center">
                @if (!isMain)
                {
                    <div class="text-center">
                        <div class="mb-8">
                            <img class="mx-auto" src="https://i.hizliresim.com/jr62e8z.png" alt="Profile" />
                        </div>

                        <!-- Action Cards -->
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 p-4">
                            <button class="card bg-base-100 shadow-xl">
                                <div class="card-body">
                                    <h3 class="card-title">Bir firm için yapacağım sunumda kullanmak</h3>
                                </div>
                            </button>
                            <button class="card bg-base-100 shadow-xl">
                                <div class="card-body">
                                    <h3 class="card-title">Uzun bir belgeyi özetle</h3>
                                </div>
                            </button>
                            <button class="card bg-base-100 shadow-xl">
                                <div class="card-body">
                                    <h3 class="card-title">Kişisel web sayfamı oluştur</h3>
                                </div>
                            </button>
                            <button class="card bg-base-100 shadow-xl">
                                <div class="card-body">
                                    <h3 class="card-title">Tesisatçı fiyat teklifi e-postası</h3>
                                </div>
                            </button>
                        </div>
                    </div>
                }
                else
                {
                    <h1>boşs</h1>
                }
            </div>

            <!-- Input Area -->
            <div class="border border-base-100 p-4">
                <div class="max-w-3xl mx-auto relative">
                    <input type="text" placeholder="ChatGPT uygulamasına ileti gönder"
                           class="input input-bordered w-full pr-10" />
                    <button class="btn btn-circle btn-ghost absolute right-2 top-1/2 transform -translate-y-1/2">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                             viewBox="0 0 16 16">
                            <path d="M15.854.146a.5.5 0 0 1 .11.54l-5.819 14.547a.5.5 0 0 1-.9.1l-3-4.802a.5.5 0 0 1 .11-.7l3.7-2.462-2.462-3.7a.5.5 0 0 1 .11-.7l4.802-3a.5.5 0 0 1 .7.11z" />
                        </svg>
                    </button>
                </div>
            </div>
        </div>

    </Authorized>
    <NotAuthorized>
        <p> Giriş yapmaniz gerekmektedir. </p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public Guid Id { get; set; } = Guid.Empty;
    private bool isMain = false;
    private bool isDropdownOpen = false;
    private string? currentTheme;
    private GptModelType currentModel;

    protected override async Task OnInitializedAsync()
    {
        currentTheme = await LocalStorage.GetItemAsync<string>("theme");

        currentModel = GptModelType.GPT4o;

        await base.OnInitializedAsync();
    }

    private void SelectModel(GptModelType model)
    {
        currentModel = model;
    }

    private void ToggleDropdown()
    {
        isDropdownOpen = !isDropdownOpen;
    }
    private async Task ToggleTheme(ChangeEventArgs e)
    {

        currentTheme = currentTheme == "light" ? "dark" : "light";
        ThemeService.CurrentTheme = currentTheme;
        await LocalStorage.SetItemAsync("theme", currentTheme);
    }
}